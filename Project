import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load your dataset
# Assuming the dataset is in a DataFrame called `data`
# data = pd.read_csv('your_dataset.csv')

plt.figure(figsize=(10, 6))
sns.boxplot(y=data['MEDV'])
plt.title('Boxplot of Median Value of Owner-Occupied Homes (MEDV)')
plt.ylabel('MEDV')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='CHAS', data=data)
plt.title('Count of Charles River Variable (0: No, 1: Yes)')
plt.xlabel('Charles River (0 = No, 1 = Yes)')
plt.ylabel('Count')
plt.xticks([0, 1], ['No', 'Yes'])
plt.show()

# Discretizing the AGE variable
data['AGE_GROUP'] = pd.cut(data['AGE'], bins=[0, 35, 70, 100], labels=['35 and Younger', '36 to 70', '70 and Older'])

plt.figure(figsize=(10, 6))
sns.boxplot(x='AGE_GROUP', y='MEDV', data=data)
plt.title('Boxplot of MEDV by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Median Value of Homes (MEDV)')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='NOX', y='INDUS', data=data)
plt.title('Scatter Plot of Nitric Oxide Concentrations vs. Proportion of Non-Retail Business Acres')
plt.xlabel('Nitric Oxide Concentrations (NOX)')
plt.ylabel('Proportion of Non-Retail Business Acres per Town (INDUS)')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(data['PTRATIO'], bins=20, kde=True)
plt.title('Histogram of Pupil-Teacher Ratio')
plt.xlabel('Pupil-Teacher Ratio')
plt.ylabel('Frequency')
plt.show()

import pandas as pd
import numpy as np
from scipy import stats
import statsmodels.api as sm

# Load your dataset
# Assuming the dataset is in a DataFrame called `data`
# data = pd.read_csv('your_dataset.csv')

# Set significance level
alpha = 0.05

# 1. T-Test for Independent Samples: Median Value of Houses Bounded by the Charles River
# Hypotheses
# H0: μ1 = μ2 (No significant difference)
# H1: μ1 ≠ μ2 (There is a significant difference)

# Separate the data
with_river = data[data['CHAS'] == 1]['MEDV']
without_river = data[data['CHAS'] == 0]['MEDV']

# Perform T-Test
t_stat, p_value = stats.ttest_ind(with_river, without_river)

# Output results
print(f"T-Test Results:\nT-Statistic: {t_stat}, P-Value: {p_value}")
if p_value < alpha:
    print("Reject the null hypothesis: Significant difference in MEDV.\n")
else:
    print("Fail to reject the null hypothesis: No significant difference in MEDV.\n")

# 2. ANOVA: Median Values of Houses by Proportion of Owner-Occupied Units Built Prior to 1940
# Hypotheses
# H0: μ1 = μ2 = μ3 (No significant difference)
# H1: At least one group differs

# Assuming age groups are already created in a column 'AGE_GROUP'
data['AGE_GROUP'] = pd.cut(data['AGE'], bins=[0, 35, 70, 100], labels=['35 and Younger', '36 to 70', '70 and Older'])

anova_result = stats.f_oneway(
    data[data['AGE_GROUP'] == '35 and Younger']['MEDV'],
    data[data['AGE_GROUP'] == '36 to 70']['MEDV'],
    data[data['AGE_GROUP'] == '70 and Older']['MEDV']
)

print(f"ANOVA Results:\nF-Statistic: {anova_result.statistic}, P-Value: {anova_result.pvalue}")
if anova_result.pvalue < alpha:
    print("Reject the null hypothesis: Significant difference in MEDV across age groups.\n")
else:
    print("Fail to reject the null hypothesis: No significant difference in MEDV across age groups.\n")

# 3. Pearson Correlation: Nitric Oxide Concentrations vs. Proportion of Non-Retail Business Acres
# Hypotheses
# H0: ρ = 0 (No correlation)
# H1: ρ ≠ 0 (There is a correlation)

correlation, p_value = stats.pearsonr(data['NOX'], data['INDUS'])

print(f"Pearson Correlation Results:\nCorrelation: {correlation}, P-Value: {p_value}")
if p_value < alpha:
    print("Reject the null hypothesis: There is a significant correlation.\n")
else:
    print("Fail to reject the null hypothesis: No significant correlation.\n")

# 4. Regression Analysis: Impact of Weighted Distance to Employment Centres on Median Value of Homes
# Hypotheses
# H0: β = 0 (No impact)
# H1: β ≠ 0 (There is an impact)

X = data['DIS']  # Independent variable (weighted distance)
y = data['MEDV']  # Dependent variable (median value)

# Adding constant for intercept
X = sm.add_constant(X)

# Fit regression model
model = sm.OLS(y, X).fit()

# Output summary
print("Regression Analysis Results:\n", model.summary())

# Check significance of the coefficient for DIS
p_value = model.pvalues['DIS']
if p_value < alpha:
    print("Reject the null hypothesis: The weighted distance significantly impacts MEDV.\n")
else:
    print("Fail to reject the null hypothesis: The weighted distance does not significantly impact MEDV.\n")

# Summary
print("Summary of Findings:")
print("Each analysis tests specific hypotheses about the data.")
print("Interpret the p-values in context, alongside the test statistics.")
print("Consider the implications of the findings in the context of housing, urban planning, and environmental policy.")
